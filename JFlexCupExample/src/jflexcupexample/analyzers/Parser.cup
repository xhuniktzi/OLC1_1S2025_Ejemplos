package jflexcupexample.analyzers;
import java_cup.runtime.Symbol;
import composite.RunStmt;
import composite.MainStmt;
import contracts.IBlock;
import java.util.LinkedList;

parser code {:
public LinkedList<IBlock> AST = new LinkedList<>();
:}

terminal String MAIN, RUN, STRATEGY, INITIAL, RULES, IF, THEN, ELSE;
terminal String BRACKET_OPEN, BRACKET_CLOSE, BRACE_OPEN, BRACE_CLOSE, COMMA, COLON;
terminal String ID, ACTION;
terminal String BOOLEAN;
terminal String OR, NOT, AND;

non terminal ini;
non terminal LinkedList<RunStmt> main_inblock;
non terminal RunStmt run_stmt;
non terminal LinkedList<String> match_lst;
non terminal LinkedList<RunStmt> run_lst;
non terminal MainStmt main;
non terminal lst_strategies, strategy, strategy_body, initial_rule, body_rules, lst_rules, rule_if;
non terminal expr;

precedence left OR, AND;
precedence nonassoc NOT;

start with ini;

ini ::= lst_strategies main:m
{:
    parser.AST.add(m);
:};

lst_strategies ::= lst_strategies strategy
| strategy
;

strategy ::= STRATEGY ID BRACE_OPEN strategy_body BRACE_CLOSE;

strategy_body ::= initial_rule body_rules;

initial_rule ::= INITIAL COLON ACTION;

body_rules ::= RULES COLON BRACKET_OPEN lst_rules BRACKET_CLOSE
;

lst_rules ::= lst_rules COMMA rule_if
| rule_if
;

rule_if ::= IF expr THEN ACTION
| ELSE ACTION
;

main ::= MAIN BRACE_OPEN main_inblock:m BRACE_CLOSE
{: RESULT = new MainStmt(m); :}
;

main_inblock ::= run_lst:l {: RESULT = l; :}
;

run_stmt ::= RUN BRACKET_OPEN match_lst:l BRACKET_CLOSE
{: RESULT = new RunStmt(l); :}
;

match_lst ::= match_lst:l COMMA ID:i {: RESULT = l; RESULT.add(i); :}
| ID:i {: RESULT = new LinkedList<String>(); RESULT.add(i); :}
;

run_lst ::= run_lst:l run_stmt:r {: RESULT = l; RESULT.add(r); :}
| run_stmt:r {: RESULT = new LinkedList<RunStmt>(); RESULT.add(r); :}
;

expr ::= expr OR expr
| expr AND expr
| NOT expr
| BOOLEAN
;
