package jflexcupexample.analyzers;
import java_cup.runtime.Symbol;
import composite.RunStmt;
import composite.MainStmt;
import contracts.IBlock;
import composite.NotExpr;
import composite.OrExpr;
import composite.AndExpr;
import composite.BoolTerm;
import composite.StrategyStmt;
import contracts.IExpr;
import java.util.LinkedList;
import jflexcupexample.Utils;
import composite.IfStmt;
import enums.Action;

parser code {:
public LinkedList<IBlock> AST = new LinkedList<>();
:}

terminal String MAIN, RUN, STRATEGY, INITIAL, RULES, IF, THEN, ELSE;
terminal String BRACKET_OPEN, BRACKET_CLOSE, BRACE_OPEN, BRACE_CLOSE, COMMA, COLON;
terminal String ID, ACTION;
terminal String BOOLEAN;
terminal String OR, NOT, AND;
terminal String MAYORQ;
terminal String RANDOM;
terminal String NUM;

non terminal ini;
non terminal LinkedList<RunStmt> main_inblock;
non terminal RunStmt run_stmt;
non terminal LinkedList<String> match_lst;
non terminal LinkedList<RunStmt> run_lst;
non terminal MainStmt main;
non terminal IfStmt rule_if;
non terminal StrategyStmt strategy;
non terminal LinkedList<StrategyStmt> lst_strategies;
non terminal IExpr expr;
non terminal LinkedList<IfStmt> lst_rules, body_rules;
non terminal Action initial_rule;

precedence left OR, AND;
precedence nonassoc NOT;

start with ini;

ini ::= lst_strategies:l main:m
{:
    for (StrategyStmt s : l) {
        parser.AST.add(s);
    }
    parser.AST.add(m);
:};

lst_strategies ::= lst_strategies:l strategy:s {: RESULT = l; RESULT.add(s); :}
| strategy:s {: RESULT = new LinkedList<StrategyStmt>(); RESULT.add(s); :}
;

strategy ::= STRATEGY ID BRACE_OPEN initial_rule:i body_rules:b BRACE_CLOSE
{: RESULT = new StrategyStmt(i,b); :}
;

initial_rule ::= INITIAL COLON ACTION:a
{: RESULT = Utils.parseAction(a); :}
;

body_rules ::= RULES COLON BRACKET_OPEN lst_rules:l BRACKET_CLOSE
{: RESULT = l; :}
;

lst_rules ::= lst_rules:l COMMA rule_if:r  {: RESULT = l; RESULT.add(r); :}
| rule_if:r {: RESULT = new LinkedList<IfStmt>(); RESULT.add(r); :}
;

rule_if ::= IF expr:e THEN ACTION:a 
{:
RESULT = new IfStmt(e, Utils.parseAction(a));
:}
| ELSE ACTION:a {:
RESULT = new IfStmt(Utils.parseAction(a));
:}
;

main ::= MAIN BRACE_OPEN main_inblock:m BRACE_CLOSE
{: RESULT = new MainStmt(m); :}
;

main_inblock ::= run_lst:l {: RESULT = l; :}
;

run_stmt ::= RUN BRACKET_OPEN match_lst:l BRACKET_CLOSE
{: RESULT = new RunStmt(l); :}
;

match_lst ::= match_lst:l COMMA ID:i {: RESULT = l; RESULT.add(i); :}
| ID:i {: RESULT = new LinkedList<String>(); RESULT.add(i); :}
;

run_lst ::= run_lst:l run_stmt:r {: RESULT = l; RESULT.add(r); :}
| run_stmt:r {: RESULT = new LinkedList<RunStmt>(); RESULT.add(r); :}
;

expr ::=  
 expr:e1 OR expr:e2 {: RESULT = new OrExpr(e1, e2); :}
| expr:e1 AND expr:e2 {: RESULT = new AndExpr(e1, e2); :}
| NOT expr:e {: RESULT = new NotExpr(e); :}
| BOOLEAN:b {: RESULT = new BoolTerm(b); :}
| RANDOM MAYORQ NUM:n {: 
    RESULT = new BoolTerm(Utils.valueBoolean(Math.random() > Utils.parseNum(n)));
:}
;
