import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

import { Division } from './composite/Division';
import { Factorial } from './composite/Factorial';
import { Modulo } from './composite/Modulo';
import { Negativo } from './composite/Negativo';
import { Potencia } from './composite/Potencia';
import { Producto } from './composite/Producto';
import { Retorno } from './composite/Retorno';
import { Resta } from './composite/Resta';
import { Suma } from './composite/Suma';
import { MayorQue } from './composite/MayorQue';
import { Condicional } from './composite/Condicional';
import { Saltar } from './composite/Saltar';
import { Continuar } from './composite/Continuar';
import { CicloWhile } from './composite/CicloWhile';
import { Asignacion } from './composite/Asignacion';
import { LlamadaFuncion } from './composite/LlamadaFuncion';
import { DefFuncion } from './composite/DefFuncion';
import { TerminalNum } from './composite/TerminalNum';
import { TerminalBool } from './composite/TerminalBool';
import { Declaration } from './composite/Declaration';
import { VariableRef } from './composite/VariableRef';
import { Print } from './composite/Print';
import fnParseDatatype from './functions/parseDatatype';
import fnParseBoolean from './functions/parseBoolean';
import { ArgsWrapper } from './context/ArgsWrapper';


export class grammarParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"inicio":3,"instructions":4,"EOF":5,"instruction":6,"declaration":7,";":8,"print":9,"if":10,"while":11,"def_function":12,"assign":13,"continue":14,"break":15,"RETURN":16,"e":17,"INGRESAR":18,"TYPE":19,"IDENTIFIER":20,"=":21,"IMPRIMIR":22,"SI":23,"(":24,")":25,"{":26,"}":27,"MIENTRAS":28,"FUNCTION":29,"lst_args":30,"CONTINUAR":31,"BREAK":32,"arg":33,",":34,"lst_e":35,"+":36,"-":37,"*":38,"/":39,"^":40,"!":41,"%":42,"NUMBER":43,"BOOLEAN":44,"E":45,"PI":46,">":47,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",16:"RETURN",18:"INGRESAR",19:"TYPE",20:"IDENTIFIER",21:"=",22:"IMPRIMIR",23:"SI",24:"(",25:")",26:"{",27:"}",28:"MIENTRAS",29:"FUNCTION",31:"CONTINUAR",32:"BREAK",34:",",36:"+",37:"-",38:"*",39:"/",40:"^",41:"!",42:"%",43:"NUMBER",44:"BOOLEAN",45:"E",46:"PI",47:">"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[7,5],[9,2],[10,7],[11,7],[13,3],[12,8],[14,1],[15,1],[33,2],[30,3],[30,1],[35,1],[35,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,4]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {19:[2,19],20:[2,20],21:[2,1]};

    constructor (yy = {}, lexer = new grammarLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,12],$V1=[1,13],$V2=[1,18],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[5,16,18,20,22,23,27,28,29,31,32],$Va=[1,35],$Vb=[1,30],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[8,25,34,36,37,38,39,40,41,42,47],$Vq=[1,74],$Vr=[8,25,34,36,37,47],$Vs=[8,25,34,36,37,38,39,42,47],$Vt=[25,34];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,28:$V5,29:$V6,31:$V7,32:$V8},{1:[3]},{5:[1,21],6:22,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,28:$V5,29:$V6,31:$V7,32:$V8},o($V9,[2,3]),{8:[1,23]},{8:[1,24]},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{8:[1,25]},{8:[1,26]},{8:[1,27]},{17:28,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{19:[1,36]},{17:37,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{24:[1,38]},{24:[1,39]},{20:[1,40]},{21:[1,41]},{8:[2,19]},{8:[2,20]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{8:[1,42],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{17:51,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:52,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vp,[2,35]),o($Vp,[2,36]),o($Vp,[2,37]),o($Vp,[2,38]),o($Vp,[2,39],{24:[1,53]}),{20:[1,54]},{8:[2,14],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{17:55,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:56,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{24:[1,57]},{17:58,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($V9,[2,12]),{17:59,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:60,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:61,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:62,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:63,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vp,[2,31]),{17:64,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{17:65,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vp,[2,33]),{25:[1,66],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{17:68,20:$Va,24:$Vb,35:67,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{21:[1,69]},{25:[1,70],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{25:[1,71],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{19:$Vq,30:72,33:73},{8:[2,17],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},o($Vr,[2,26],{38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn}),o($Vr,[2,27],{38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn}),o($Vs,[2,28],{40:$Vl,41:$Vm}),o($Vs,[2,29],{40:$Vl,41:$Vm}),o($Vs,[2,30],{41:$Vm}),o($Vs,[2,32],{40:$Vl,41:$Vm}),o([8,25,34,47],[2,40],{36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn}),o($Vp,[2,34]),{25:[1,75],34:[1,76]},o($Vt,[2,24],{36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo}),{17:77,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{26:[1,78]},{26:[1,79]},{25:[1,80],34:[1,81]},o($Vt,[2,23]),{20:[1,82]},o($Vp,[2,41]),{17:83,20:$Va,24:$Vb,37:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},{8:[2,13],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo},{4:84,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,28:$V5,29:$V6,31:$V7,32:$V8},{4:85,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,28:$V5,29:$V6,31:$V7,32:$V8},{26:[1,86]},{19:$Vq,33:87},o($Vt,[2,21]),o($Vt,[2,25],{36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,47:$Vo}),{6:22,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,27:[1,88],28:$V5,29:$V6,31:$V7,32:$V8},{6:22,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,27:[1,89],28:$V5,29:$V6,31:$V7,32:$V8},{4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,28:$V5,29:$V6,31:$V7,32:$V8},o($Vt,[2,22]),o($V9,[2,15]),o($V9,[2,16]),{6:22,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,18:$V1,20:$V2,22:$V3,23:$V4,27:[1,91],28:$V5,29:$V6,31:$V7,32:$V8},o($V9,[2,18])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$[0] = $$[$0]; 
break;
case 4: case 5: case 9: case 10: case 11:
 this.$ = $$[$0-1]; 
break;
case 6: case 7: case 8:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = new Retorno($$[$0-1], _$[$0-2]); 
break;
case 13:
 this.$ = new Declaration(fnParseDatatype($$[$0-3]), $$[$0-2], $$[$0], _$[$0-4]); 
break;
case 14:
 this.$ = new Print($$[$0], _$[$0-1]); 
break;
case 15:
 this.$ = new Condicional($$[$0-4], $$[$0-1], _$[$0-6]); 
break;
case 16:
 this.$ = new CicloWhile($$[$0-4], $$[$0-1], _$[$0-6]); 
break;
case 17:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2]); 
break;
case 18:
 this.$ = new DefFuncion($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7]); 
break;
case 19:
 this.$ = new Continuar(_$[$0]); 
break;
case 20:
 this.$ = new Saltar(_$[$0]); 
break;
case 21:
 this.$ =  new ArgsWrapper($$[$0], fnParseDatatype($$[$0-1])); 
break;
case 22: case 25:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 23: case 24:
 this.$ = [$$[$0]]; 
break;
case 26:
this.$ = new Suma($$[$0-2], $$[$0], _$[$0-2]);
break;
case 27:
this.$ = new Resta($$[$0-2], $$[$0], _$[$0-2]);
break;
case 28:
this.$ = new Producto($$[$0-2], $$[$0], _$[$0-2]);
break;
case 29:
this.$ = new Division($$[$0-2], $$[$0], _$[$0-2]);
break;
case 30:
this.$ = new Potencia($$[$0-2], $$[$0], _$[$0-2]);
break;
case 31:

          this.$ = new Factorial($$[$0-1], _$[$0-1]);
        
break;
case 32:
this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2]);
break;
case 33:
this.$ = new Negativo($$[$0], _$[$0-1]);
break;
case 34:
this.$ = $$[$0-1];
break;
case 35:
this.$ = new TerminalNum(Number(yytext), _$[$0]);
break;
case 36:
this.$ = new TerminalBool(fnParseBoolean(yytext), _$[$0]);
break;
case 37:
this.$ = new TerminalNum(Math.E, _$[$0]);
break;
case 38:
this.$ = new TerminalNum(Math.PI, _$[$0]);
break;
case 39:
this.$ = new VariableRef($$[$0], _$[$0]);
break;
case 40:
this.$ = new MayorQue($$[$0-2], $$[$0], _$[$0-2]);
break;
case 41:
this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3]);
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class grammarLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"grammar"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/,
        /^(?:[0-9]+(?:\.[0-9]+)?\b)/,
        /^(?:true|false)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:=)/,
        /^(?:\*)/,
        /^(?:\/)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:\^)/,
        /^(?:!)/,
        /^(?:%)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:>)/,
        /^(?:PI\b)/,
        /^(?:E\b)/,
        /^(?:ingresar\b)/,
        /^(?:imprimir\b)/,
        /^(?:si\b)/,
        /^(?:mientras\b)/,
        /^(?:continuar\b)/,
        /^(?:break\b)/,
        /^(?:return\b)/,
        /^(?:function\b)/,
        /^(?:int\b)/,
        /^(?:boolean\b)/,
        /^(?:[0-9a-zA-Z_]+)/,
        /^(?:$)/,
        /^(?:.)/
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 43
      break;
    case 2:return 44
      break;
    case 3:return 8
      break;
    case 4:return 34
      break;
    case 5:return 21
      break;
    case 6:return 38
      break;
    case 7:return 39
      break;
    case 8:return 37
      break;
    case 9:return 36
      break;
    case 10:return 40
      break;
    case 11:return 41
      break;
    case 12:return 42
      break;
    case 13:return 24
      break;
    case 14:return 25
      break;
    case 15:return 26	
      break;
    case 16:return 27
      break;
    case 17:return 47
      break;
    case 18:return 46
      break;
    case 19:return 45
      break;
    case 20:return 18
      break;
    case 21:return 22
      break;
    case 22:return 23
      break;
    case 23:return 28
      break;
    case 24:return 31
      break;
    case 25:return 32
      break;
    case 26:return 16
      break;
    case 27:return 29
      break;
    case 28:return 19
      break;
    case 29:return 19
      break;
    case 30:return 20;
      break;
    case 31:return 5
      break;
    case 32:
                           console.error('Lexico: Unexpected character ' + yy_.yytext);
                        
      break;
        }
    }
}


